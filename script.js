// ============================================================================
// IN√çCIO PARTE 1: CONFIGURA√á√ïES GLOBAIS E CONSTANTES
// ============================================================================

// Configura√ß√µes principais
const CONFIG = {
    VERSION: '2.0.0',
    DEBUG: true,
    API_TIMEOUT: 30000,
    MAX_RETRIES: 3,
    DELAY_BETWEEN_ATTEMPTS: 1000
};

// URLs das APIs
const API_URLS = {
    HUGGING_FACE_BASE: 'https://api-inference.huggingface.co/models/',
    POLLINATIONS: 'https://image.pollinations.ai/prompt/',
    PICSUM: 'https://picsum.photos/'
};

// Estat√≠sticas globais
let stats = {
    totalGerado: 0,
    sucessoIA: 0,
    falhasIA: 0,
    tempoMedio: 0
};

// Vari√°veis globais do sistema
let versiculoAtual = null;
let temaAtual = 'esperanca';
let versiculos = [];
let historicoImagens = [];

// ============================================================================
// FIM PARTE 1: CONFIGURA√á√ïES GLOBAIS E CONSTANTES
// ============================================================================

// ============================================================================
// IN√çCIO PARTE 2: DEFINI√á√ïES DE ESTILOS ART√çSTICOS
// ============================================================================

const estilosArtisticos = {
    BARROCO: {
        nome: "Barroco",
        periodo: "s√©culos XVII-XVIII",
        peso: 0.6, // 60% de chance
        descricao: "Dramaticidade intensa e chiaroscuro",
        caracteristicas: [
            "contraste extremo de luz e sombra (chiaroscuro)",
            "dramaticidade intensa",
            "movimento din√¢mico",
            "emo√ß√µes exuberantes",
            "detalhes ornamentais elaborados",
            "composi√ß√µes diagonais"
        ],
        artistas: ["Caravaggio", "Rembrandt", "Rubens", "Vel√°zquez"],
        termosPrompt: [
            "baroque painting style",
            "dramatic chiaroscuro lighting",
            "oil on canvas, 17th century",
            "ornate gilded frame",
            "religious baroque masterpiece",
            "by Caravaggio and Rembrandt",
            "intense emotional expression",
            "diagonal composition",
            "rich golden tones",
            "deep shadows and bright highlights"
        ],
        termosNegativos: [
            "modern", "photorealistic", "abstract", "cartoon", "anime",
            "flat design", "digital art", "3D render", "contemporary",
            "minimalist", "geometric", "neon colors", "vector art"
        ]
    },
    RENASCENTISTA: {
        nome: "Renascentista", 
        periodo: "s√©culos XIV-XVI",
        peso: 0.4, // 40% de chance
        descricao: "Propor√ß√£o matem√°tica e harmonia",
        caracteristicas: [
            "propor√ß√£o e simetria matem√°tica",
            "perspectiva linear perfeita",
            "equil√≠brio harmonioso",
            "idealiza√ß√£o da forma humana",
            "temas cl√°ssicos e b√≠blicos",
            "detalhes minuciosos"
        ],
        artistas: ["Leonardo da Vinci", "Michelangelo", "Rafael", "Botticelli"],
        termosPrompt: [
            "renaissance fresco painting",
            "perfect linear perspective",
            "oil on wood panel, 15th century",
            "golden ratio composition",
            "by Leonardo da Vinci and Raphael",
            "sfumato technique",
            "balanced symmetrical composition",
            "classical architectural background",
            "soft natural lighting",
            "anatomically perfect figures"
        ],
        termosNegativos: [
            "modern", "photorealistic", "abstract", "baroque", "dramatic lighting",
            "ornate", "exaggerated emotions", "contemporary", "digital art",
            "asymmetrical", "high contrast", "neon", "minimalist"
        ]
    }
};

// Elementos hist√≥ricos espec√≠ficos por estilo
const elementosHistoricos = {
    BARROCO: [
        "anjo barroco com asas dram√°ticas",
        "santo com express√£o extasiada",
        "raios de luz celestial intensos", 
        "vestes douradas com dobras profundas",
        "cortinas vermelhas pesadas",
        "nuvens tempestuosas divinas",
        "querubins em movimento espiral"
    ],
    RENASCENTISTA: [
        "composi√ß√£o em tri√¢ngulo equilibrado",
        "fundo paisag√≠stico cl√°ssico",
        "figuras em pose idealizada",
        "detalhes anat√¥micos perfeitos",
        "arquitetura cl√°ssica romana",
        "jardim renascentista ao fundo",
        "halos dourados geom√©tricos"
    ]
};

// ============================================================================
// FIM PARTE 2: DEFINI√á√ïES DE ESTILOS ART√çSTICOS
// ============================================================================

// ============================================================================
// IN√çCIO PARTE 3: MODELOS DE IA E PAR√ÇMETROS
// ============================================================================

// Modelos Hugging Face priorit√°rios (testados e funcionais)
const modelosHFPrioritarios = [
    {
        nome: "SDXL Base 1.0",
        url: "stabilityai/stable-diffusion-xl-base-1.0",
        categoria: "alta",
        confiabilidade: 10,
        tempo_estimado: "30-60s",
        parametros_customizados: {
            num_inference_steps: 50,
            guidance_scale: 8.5,
            width: 1024,
            height: 1024
        }
    },
    {
        nome: "SDXL Turbo",
        url: "stabilityai/sdxl-turbo",
        categoria: "rapida",
        confiabilidade: 8,
        tempo_estimado: "10-20s",
        parametros_customizados: {
            num_inference_steps: 25,
            guidance_scale: 7.5,
            width: 1024,
            height: 1024
        }
    }
];

// APIs alternativas (sem necessidade de chave)
const apisAlternativas = [
    {
        nome: "Pollinations AI",
        confiabilidade: 9,
        funcao: async (prompt) => {
            const encodedPrompt = encodeURIComponent(prompt);
            const seed = Math.floor(Math.random() * 1000000);
            const url = `${API_URLS.POLLINATIONS}${encodedPrompt}?width=1024&height=1024&model=flux&enhance=true&nologo=true&seed=${seed}`;
            
            console.log('üîÑ Gerando com Pollinations...');
            const response = await fetch(url);
            if (!response.ok) throw new Error(`Status: ${response.status}`);
            
            const blob = await response.blob();
            if (blob.size < 5000) throw new Error('Imagem muito pequena');
            
            return blob;
        }
    },
    {
        nome: "Pollinations Turbo",
        confiabilidade: 7,
        funcao: async (prompt) => {
            const encodedPrompt = encodeURIComponent(prompt);
            const url = `${API_URLS.POLLINATIONS}${encodedPrompt}?width=512&height=512&model=turbo&enhance=false&nologo=true`;
            
            const response = await fetch(url);
            if (!response.ok) throw new Error(`Status: ${response.status}`);
            return await response.blob();
        }
    }
];

// Par√¢metros espec√≠ficos por estilo
const parametrosEstilos = {
    BARROCO: {
        num_inference_steps: 45,
        guidance_scale: 11.5,
        temperature: 0.8,
        top_p: 0.92
    },
    RENASCENTISTA: {
        num_inference_steps: 50,
        guidance_scale: 9.5,
        temperature: 0.7,
        top_p: 0.9
    }
};

// ============================================================================
// FIM PARTE 3: MODELOS DE IA E PAR√ÇMETROS
// ============================================================================

// ============================================================================
// IN√çCIO PARTE 4: FUN√á√ïES UTILIT√ÅRIAS
// ============================================================================

// Fun√ß√£o de delay
function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// Mostrar progresso na interface
function mostrarProgresso(mensagem, porcentagem) {
    console.log(`üìä ${mensagem} - ${porcentagem}%`);
    
    const progressBar = document.getElementById('progress-bar');
    const progressText = document.getElementById('progress-text');
    
    if (progressBar) {
        progressBar.style.width = `${porcentagem}%`;
        progressBar.setAttribute('aria-valuenow', porcentagem);
    }
    
    if (progressText) {
        progressText.textContent = mensagem;
    }
}

// Sistema de notifica√ß√µes toast
function mostrarToast(mensagem, tipo = 'success') {
    console.log(`üì¢ ${tipo.toUpperCase()}: ${mensagem}`);
    
    const toastContainer = document.getElementById('toast-container') || createToastContainer();
    const toast = document.createElement('div');
    toast.className = `toast toast-${tipo}`;
    toast.innerHTML = `
        <div class="toast-content">
            <span class="toast-icon">${tipo === 'success' ? '‚úÖ' : '‚ùå'}</span>
            <span class="toast-message">${mensagem}</span>
        </div>
    `;
    
    toastContainer.appendChild(toast);
    
    setTimeout(() => {
        toast.classList.add('toast-fade-out');
        setTimeout(() => toast.remove(), 500);
    }, 3000);
}

// Criar container de toast se n√£o existir
function createToastContainer() {
    const container = document.createElement('div');
    container.id = 'toast-container';
    container.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 9999;
    `;
    document.body.appendChild(container);
    return container;
}

// Formatar tempo
function formatarTempo(ms) {
    const segundos = Math.floor(ms / 1000);
    return segundos > 60 ? `${Math.floor(segundos / 60)}m ${segundos % 60}s` : `${segundos}s`;
}

// ============================================================================
// FIM PARTE 4: FUN√á√ïES UTILIT√ÅRIAS
// ============================================================================

// ============================================================================
// IN√çCIO PARTE 5: GEST√ÉO DE API KEYS
// ============================================================================

// Obter API key de m√∫ltiplas fontes
function getAPIKey() {
    // 1. CONFIG do GitHub Actions (produ√ß√£o)
    if (typeof window !== 'undefined' && window.CONFIG?.HUGGING_FACE_API_KEY) {
        const chave = window.CONFIG.HUGGING_FACE_API_KEY;
        if (chave && chave !== '{{ HUGGING_FACE_API_KEY }}' && chave.startsWith('hf_')) {
            console.log('üîë Usando chave do CONFIG (produ√ß√£o segura)');
            return chave;
        }
    }
    
    // 2. Vari√°vel global (desenvolvimento)
    if (typeof HUGGING_FACE_API_KEY !== 'undefined' && 
        HUGGING_FACE_API_KEY && 
        HUGGING_FACE_API_KEY !== 'SUA_CHAVE_AQUI' && 
        HUGGING_FACE_API_KEY.startsWith('hf_')) {
        console.log('üîë Usando chave local (desenvolvimento)');
        return HUGGING_FACE_API_KEY;
    }
    
    // 3. localStorage (usu√°rio definiu manualmente)
    const storedKey = localStorage.getItem('hf_api_key');
    if (storedKey?.startsWith('hf_')) {
        console.log('üîë Usando chave do localStorage');
        return storedKey;
    }
    
    // 4. Chave manual tempor√°ria
    if (window.CHAVE_MANUAL?.startsWith('hf_')) {
        console.log('üîë Usando chave manual tempor√°ria');
        return window.CHAVE_MANUAL;
    }
    
    console.log('üö´ Nenhuma chave API encontrada');
    return null;
}

// Definir chave manualmente (para debug)
function definirChaveManualmente(chave) {
    if (!chave || !chave.startsWith('hf_')) {
        console.error('‚ùå Chave inv√°lida - deve come√ßar com "hf_"');
        return false;
    }
    
    localStorage.setItem('hf_api_key', chave);
    window.CHAVE_MANUAL = chave;
    console.log('üíæ Chave salva com sucesso!');
    mostrarToast('Chave API configurada!', 'success');
    return true;
}

// Verificar status da chave
async function verificarChaveAPI() {
    const chave = getAPIKey();
    if (!chave) return false;
    
    try {
        const response = await fetch('https://huggingface.co/api/whoami', {
            headers: { 'Authorization': `Bearer ${chave}` }
        });
        const data = await response.json();
        console.log('‚úÖ Chave v√°lida:', data.name || 'Usu√°rio verificado');
        return true;
    } catch (error) {
        console.log('‚ùå Chave inv√°lida ou expirada');
        return false;
    }
}

// ============================================================================
// FIM PARTE 5: GEST√ÉO DE API KEYS
// ============================================================================

// ============================================================================
// IN√çCIO PARTE 6: FUN√á√ïES DE GERA√á√ÉO DE PROMPTS E ESTILOS
// ============================================================================

// Escolher estilo aleat√≥rio com pesos
function escolherEstiloAleatorio() {
    const estilos = [
        { nome: "BARROCO", peso: estilosArtisticos.BARROCO.peso },
        { nome: "RENASCENTISTA", peso: estilosArtisticos.RENASCENTISTA.peso }
    ];
    
    const totalPeso = estilos.reduce((sum, s) => sum + s.peso, 0);
    let rand = Math.random() * totalPeso;
    
    for (const estilo of estilos) {
        rand -= estilo.peso;
        if (rand <= 0) {
            console.log(`üé® Estilo escolhido: ${estilo.nome}`);
            return estilo.nome;
        }
    }
    
    return "BARROCO"; // Fallback seguro
}

// Gerar prompt estilizado com elementos hist√≥ricos
function gerarPromptEstilizado(promptBase) {
    const estiloEscolhido = escolherEstiloAleatorio();
    const config = estilosArtisticos[estiloEscolhido];
    
    // Escolher elemento hist√≥rico aleat√≥rio
    const elementos = elementosHistoricos[estiloEscolhido];
    const elementoAleatorio = elementos[Math.floor(Math.random() * elementos.length)];
    
    // Escolher artistas de refer√™ncia
    const artistasRef = config.artistas.slice(0, 2).join(" and ");
    
    // Construir prompt completo
    const promptFinal = [
        `masterpiece, ${config.nome.toLowerCase()} painting style`,
        promptBase,
        elementoAleatorio,
        ...config.termosPrompt,
        `by ${artistasRef}`,
        "museum quality restoration",
        "canvas texture visible",
        "aged varnish effect",
        "authentic historical artwork",
        "no modern elements"
    ].join(", ");
    
    // Log detalhado
    console.log(`üé® ESTILO: ${config.nome} (${config.periodo})`);
    console.log(`üñåÔ∏è ARTISTAS: ${artistasRef}`);
    console.log(`üìù ELEMENTO: ${elementoAleatorio}`);
    console.log(`üí° PROMPT: ${promptFinal.substring(0, 150)}...`);
    
    return {
        prompt: promptFinal,
        negative_prompt: config.termosNegativos.join(", "),
        estilo: estiloEscolhido
    };
}

// Criar prompt baseado no vers√≠culo e tema
function criarPromptBase(versiculo, tema) {
    const palavrasChave = extrairPalavrasChave(versiculo.texto);
    
    const temasVisuais = {
        esperanca: "hopeful scene, bright future, sunrise, ascending birds",
        fe: "faith symbols, divine light, praying hands, sacred atmosphere",
        amor: "warm embrace, hearts, compassionate scene, gentle touch",
        sabedoria: "ancient books, wise owl, library setting, knowledge symbols",
        paz: "calm waters, dove, olive branch, serene landscape",
        forca: "mighty mountains, lion, strong oak tree, fortress",
        gratidao: "harvest scene, thanksgiving, abundant fruits, blessing hands",
        oracao: "kneeling figure, cathedral, candlelight, spiritual moment"
    };
    
    const elementosTema = temasVisuais[tema] || "spiritual scene";
    
    return `beautiful artwork, divine light, golden rays, heavenly atmosphere, ${elementosTema}, inspired by "${palavrasChave}"`;
}

// Extrair palavras-chave do vers√≠culo
function extrairPalavrasChave(texto) {
    const palavrasIgnoradas = ['o', 'a', 'de', 'do', 'da', 'e', 'que', 'para', 'com', 'em', 'por'];
    const palavras = texto.toLowerCase()
        .replace(/[.,;:!?]/g, '')
        .split(' ')
        .filter(p => p.length > 2 && !palavrasIgnoradas.includes(p))
        .slice(0, 6)
        .join(", ");
    
    return palavras || "biblical scene";
}

// ============================================================================
// FIM PARTE 6: FUN√á√ïES DE GERA√á√ÉO DE PROMPTS E ESTILOS
// ============================================================================

// ============================================================================
// IN√çCIO PARTE 7: FUN√á√ïES DE CHAMADA DE API
// ============================================================================

// Chamar API Hugging Face com seguran√ßa e retry
async function chamarAPIHuggingFaceSeguro(url, prompt, parametros) {
    const chave = getAPIKey();
    if (!chave) {
        throw new Error('üîë Chave API n√£o configurada ou inv√°lida');
    }
    
    const tentarChamada = async (tentativa = 1) => {
        try {
            console.log(`üîÑ Chamando: ${url.split('/').pop()} (tentativa ${tentativa})`);
            
            const response = await fetch(API_URLS.HUGGING_FACE_BASE + url, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${chave}`,
                    'Content-Type': 'application/json',
                    'x-wait-for-model': 'true'
                },
                body: JSON.stringify({
                    inputs: prompt,
                    parameters: parametros
                }),
                signal: AbortSignal.timeout(CONFIG.API_TIMEOUT)
            });
            
            console.log(`üì° Status: ${response.status} | Modelo: ${url.split('/').pop()}`);
            
            if (response.status === 503) {
                console.log('‚è≥ Modelo carregando, aguardando...');
                await delay(5000);
                if (tentativa < CONFIG.MAX_RETRIES) {
                    return tentarChamada(tentativa + 1);
                }
            }
            
            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`HTTP ${response.status}: ${errorText}`);
            }
            
            const blob = await response.blob();
            
            if (blob.size < 1000) {
                throw new Error('Imagem muito pequena ou corrompida');
            }
            
            console.log(`‚úÖ Sucesso: ${blob.size} bytes | ${url.split('/').pop()}`);
            return blob;
            
        } catch (error) {
            console.log(`‚ùå Erro em ${url.split('/').pop()}: ${error.message}`);
            
            if (tentativa < CONFIG.MAX_RETRIES && error.name !== 'AbortError') {
                console.log(`üîÑ Tentando novamente em ${CONFIG.DELAY_BETWEEN_ATTEMPTS}ms...`);
                await delay(CONFIG.DELAY_BETWEEN_ATTEMPTS);
                return tentarChamada(tentativa + 1);
            }
            
            throw error;
        }
    };
    
    return tentarChamada();
}

// Fun√ß√£o principal de tentativa de gera√ß√£o
async function tentarGerarImagemIA(promptBase, tema) {
    const startTime = Date.now();
    console.log('üöÄ Iniciando gera√ß√£o inteligente...');
    mostrarProgresso('Preparando gera√ß√£o...', 5);
    
    // Gerar prompt estilizado
    const { prompt, negative_prompt, estilo } = gerarPromptEstilizado(promptBase);
    
    // Preparar par√¢metros espec√≠ficos do estilo
    const parametrosBase = {
        ...parametrosEstilos[estilo],
        negative_prompt: negative_prompt,
        width: 1024,
        height: 1024
    };
    
    const chave = getAPIKey();
    
    // PRIORIDADE 1: Modelos Hugging Face (se tiver chave)
    if (chave) {
        console.log('ü§ñ Priorizando modelos Hugging Face...');
        
        for (let i = 0; i < modelosHFPrioritarios.length; i++) {
            const modelo = modelosHFPrioritarios[i];
            
            try {
                mostrarProgresso(`ü§ñ ${modelo.nome}...`, 20 + (i * 30));
                console.log(`üîÑ Tentando ${modelo.nome} (Conf: ${modelo.confiabilidade}/10)`);
                
                const parametrosFinal = {
                    ...parametrosBase,
                    ...modelo.parametros_customizados
                };
                
                const blob = await chamarAPIHuggingFaceSeguro(modelo.url, prompt, parametrosFinal);
                
                if (blob && blob.size > 5000) {
                    const tempoTotal = Date.now() - startTime;
                    console.log(`‚úÖ ${modelo.nome} funcionou em ${formatarTempo(tempoTotal)}!`);
                    
                    mostrarToast(`üé® Imagem criada por: ${modelo.nome} (${estilo})`, 'success');
                    
                    // Atualizar estat√≠sticas
                    stats.sucessoIA++;
                    stats.totalGerado++;
                    stats.tempoMedio = (stats.tempoMedio + tempoTotal) / stats.sucessoIA;
                    
                    return blob;
                }
                
            } catch (error) {
                console.log(`‚ùå ${modelo.nome} falhou: ${error.message}`);
                stats.falhasIA++;
            }
            
            await delay(CONFIG.DELAY_BETWEEN_ATTEMPTS);
        }
    } else {
        console.log('üîê Sem chave HuggingFace, pulando para alternativas');
    }
    
    // PRIORIDADE 2: APIs Alternativas (sem chave)
    console.log('üÜì Tentando APIs alternativas gratuitas...');
    
    for (let i = 0; i < apisAlternativas.length; i++) {
        const api = apisAlternativas[i];
        
        try {
            mostrarProgresso(`üÜì ${api.nome}...`, 60 + (i * 20));
            console.log(`üîÑ Tentando ${api.nome} (Conf: ${api.confiabilidade}/10)`);
            
            const blob = await api.funcao(prompt);
            
            if (blob && blob.size > 3000) {
                const tempoTotal = Date.now() - startTime;
                console.log(`‚úÖ ${api.nome} funcionou em ${formatarTempo(tempoTotal)}!`);
                
                mostrarToast(`üé® Imagem criada por: ${api.nome}`, 'success');
                
                stats.sucessoIA++;
                stats.totalGerado++;
                
                return blob;
            }
            
        } catch (error) {
            console.log(`‚ùå ${api.nome} falhou: ${error.message}`);
            stats.falhasIA++;
        }
        
        await delay(1000);
    }
    
    // PRIORIDADE 3: Arte Local (fallback final)
    console.log('üé® Todas as APIs falharam, gerando arte local...');
    mostrarProgresso('Criando arte local...', 90);
    
    return await gerarArteLocal(prompt, tema, estilo);
}

// ============================================================================
// FIM PARTE 7: FUN√á√ïES DE CHAMADA DE API
// ============================================================================

// ============================================================================
// IN√çCIO PARTE 8: SISTEMA DE ARTE LOCAL (FALLBACK)
// ============================================================================

// Gerar arte local usando Canvas
async function gerarArteLocal(prompt, tema, estilo) {
    console.log('üé® Gerando arte local com Canvas...');
    
    const canvas = document.createElement('canvas');
    canvas.width = 1024;
    canvas.height = 1024;
    const ctx = canvas.getContext('2d');
    
    // Definir cores baseadas no estilo
    const paletas = {
        BARROCO: {
            fundo: ['#1a0f0a', '#2d1810', '#3d251a'],
            luz: ['#ffd700', '#ffed4e', '#fff59d'],
            sombra: ['#000000', '#1a1a1a', '#2e2e2e']
        },
        RENASCENTISTA: {
            fundo: ['#e8dcc6', '#f5e6d3', '#faf8f1'],
            luz: ['#fff3e0', '#ffe0b2', '#ffcc80'],
            sombra: ['#5d4037', '#6d4c41', '#795548']
        }
    };
    
    const paleta = paletas[estilo] || paletas.BARROCO;
    
    // Criar gradiente de fundo
    const gradient = ctx.createRadialGradient(512, 512, 0, 512, 512, 600);
    gradient.addColorStop(0, paleta.luz[0]);
    gradient.addColorStop(0.5, paleta.luz[1]);
    gradient.addColorStop(1, paleta.fundo[0]);
    
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    
    // Adicionar elementos decorativos
    ctx.globalAlpha = 0.3;
    
    // Raios de luz
    for (let i = 0; i < 12; i++) {
        ctx.save();
        ctx.translate(512, 200);
        ctx.rotate((Math.PI * 2 * i) / 12);
        
        const rayGradient = ctx.createLinearGradient(0, 0, 0, 400);
        rayGradient.addColorStop(0, paleta.luz[0]);
        rayGradient.addColorStop(1, 'transparent');
        
        ctx.fillStyle = rayGradient;
        ctx.beginPath();
        ctx.moveTo(-20, 0);
        ctx.lineTo(20, 0);
        ctx.lineTo(10, 400);
        ctx.lineTo(-10, 400);
        ctx.closePath();
        ctx.fill();
        
        ctx.restore();
    }
    
    // Adicionar texto do vers√≠culo
    ctx.globalAlpha = 1;
    ctx.font = 'bold 48px Georgia';
    ctx.fillStyle = paleta.sombra[0];
    ctx.textAlign = 'center';
    ctx.shadowColor = paleta.luz[0];
    ctx.shadowBlur = 20;
    
    const palavras = prompt.split(' ').slice(0, 5).join(' ');
    ctx.fillText(palavras.toUpperCase(), 512, 900);
    
    // Converter para blob
    return new Promise((resolve) => {
        canvas.toBlob((blob) => {
            console.log('‚úÖ Arte local gerada com sucesso!');
            mostrarToast('üé® Arte criada localmente', 'success');
            resolve(blob);
        }, 'image/jpeg', 0.95);
    });
}

// ============================================================================
// FIM PARTE 8: SISTEMA DE ARTE LOCAL (FALLBACK)
// ============================================================================

// ============================================================================
// IN√çCIO PARTE 9: FUN√á√ïES PRINCIPAIS DE GERA√á√ÉO
// ============================================================================

// Fun√ß√£o principal para gerar vers√≠culo com IA
async function gerarVersiculoComIA(versiculo, tema) {
    console.log('üöÄ Gerando vers√≠culo com IA...');
    console.log(`üìñ Vers√≠culo: "${versiculo.texto}"`);
    console.log(`üéØ Tema: ${tema}`);
    
    try {
        // Criar prompt base
        const promptBase = criarPromptBase(versiculo, tema);
        
        // Tentar gerar imagem
        const imagemBlob = await tentarGerarImagemIA(promptBase, tema);
        
        if (imagemBlob) {
            // Exibir imagem
            await exibirImagem(imagemBlob);
            
            // Salvar no hist√≥rico
            historicoImagens.push({
                versiculo: versiculo,
                tema: tema,
                timestamp: new Date().toISOString(),
                tamanho: imagemBlob.size
            });
            
            console.log('‚úÖ Imagem gerada com IA baseada no vers√≠culo!');
            return true;
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao gerar imagem:', error);
        mostrarToast('Erro ao gerar imagem', 'error');
        return false;
    }
}

// Exibir imagem na interface
async function exibirImagem(blob) {
    const imagemURL = URL.createObjectURL(blob);
    const canvasImagem = document.getElementById('canvasImagem');
    
    if (canvasImagem) {
        // Adicionar efeito de fade
        canvasImagem.style.opacity = '0';
        canvasImagem.src = imagemURL;
        
        canvasImagem.onload = () => {
            canvasImagem.style.transition = 'opacity 1s';
            canvasImagem.style.opacity = '1';
            
            // Limpar URL antiga ap√≥s carregar
            setTimeout(() => {
                if (canvasImagem.dataset.oldSrc) {
                    URL.revokeObjectURL(canvasImagem.dataset.oldSrc);
                }
                canvasImagem.dataset.oldSrc = imagemURL;
            }, 1000);
        };
    }
}

// ============================================================================
// FIM PARTE 9: FUN√á√ïES PRINCIPAIS DE GERA√á√ÉO
// ============================================================================

// ============================================================================
// IN√çCIO PARTE 10: CARREGAMENTO DE VERS√çCULOS
// ============================================================================

// Carregar vers√≠culos do arquivo JSON
async function carregarVersiculos() {
    console.log('üìö Carregando vers√≠culos...');
    
    try {
        const response = await fetch('versiculos.json');
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        versiculos = data.versiculos || data;
        
        console.log(`‚úÖ ${versiculos.length} vers√≠culos carregados`);
        
        // Agrupar por tema
        const temas = [...new Set(versiculos.map(v => v.tema))];
        console.log(`üìö Temas dispon√≠veis: ${temas.join(', ')}`);
        
        // Popular dropdown de temas se existir
        popularTemas(temas);
        
        // Gerar primeiro vers√≠culo automaticamente
        if (versiculos.length > 0) {
            await gerarNovoVersiculo();
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao carregar vers√≠culos:', error);
        
        // Usar vers√≠culos de fallback
        versiculos = obterVersiculosFallback();
        console.log('üìö Usando vers√≠culos de fallback');
        
        await gerarNovoVersiculo();
    }
}

// Popular dropdown de temas
function popularTemas(temas) {
    const selectTema = document.getElementById('temaEscolhido');
    
    if (selectTema && temas.length > 0) {
        selectTema.innerHTML = '<option value="">Todos os temas</option>';
        
        temas.forEach(tema => {
            const option = document.createElement('option');
            option.value = tema;
            option.textContent = tema.charAt(0).toUpperCase() + tema.slice(1);
            selectTema.appendChild(option);
        });
    }
}

// Obter vers√≠culos de fallback
function obterVersiculosFallback() {
    return [
        {
            texto: "Porque eu bem sei os pensamentos que tenho a vosso respeito, diz o Senhor; pensamentos de paz, e n√£o de mal, para vos dar o fim que esperais.",
            referencia: "Jeremias 29:11",
            tema: "esperanca"
        },
        {
            texto: "Confia no Senhor de todo o teu cora√ß√£o, e n√£o te estribes no teu pr√≥prio entendimento.",
            referencia: "Prov√©rbios 3:5",
            tema: "fe"
        },
        {
            texto: "O Senhor √© o meu pastor, nada me faltar√°.",
            referencia: "Salmos 23:1",
            tema: "paz"
        }
    ];
}

// ============================================================================
// FIM PARTE 10: CARREGAMENTO DE VERS√çCULOS
// ============================================================================

// ============================================================================
// IN√çCIO PARTE 11: GERA√á√ÉO E MANIPULA√á√ÉO DE VERS√çCULOS
// ============================================================================

// Gerar novo vers√≠culo
async function gerarNovoVersiculo() {
    console.log('üé≤ Gerando novo vers√≠culo...');
    
    const temaEscolhido = document.getElementById('temaEscolhido')?.value || '';
    
    // Filtrar por tema se selecionado
    let versiculosDisponiveis = versiculos;
    if (temaEscolhido) {
        versiculosDisponiveis = versiculos.filter(v => v.tema === temaEscolhido);
        console.log(`üéØ Filtrando por tema: ${temaEscolhido}`);
    }
    
    // Escolher vers√≠culo aleat√≥rio
    if (versiculosDisponiveis.length > 0) {
        const indice = Math.floor(Math.random() * versiculosDisponiveis.length);
        versiculoAtual = versiculosDisponiveis[indice];
        temaAtual = versiculoAtual.tema;
        
        console.log(`üìñ Vers√≠culo escolhido: ${versiculoAtual.referencia}`);
        
        // Atualizar interface
        atualizarInterface();
        
        // Gerar imagem com IA
        await gerarVersiculoComIA(versiculoAtual, temaAtual);
    } else {
        console.log('‚ö†Ô∏è Nenhum vers√≠culo dispon√≠vel para o tema selecionado');
        mostrarToast('Nenhum vers√≠culo encontrado para este tema', 'error');
    }
}

// Atualizar interface com vers√≠culo atual
function atualizarInterface() {
    if (!versiculoAtual) return;
    
    const elementoTexto = document.getElementById('versiculoTexto');
    const elementoReferencia = document.getElementById('versiculoReferencia');
    
    if (elementoTexto) {
        elementoTexto.textContent = versiculoAtual.texto;
        elementoTexto.style.opacity = '0';
        setTimeout(() => {
            elementoTexto.style.transition = 'opacity 1s';
            elementoTexto.style.opacity = '1';
        }, 100);
    }
    
    if (elementoReferencia) {
        elementoReferencia.textContent = versiculoAtual.referencia;
    }
}

// ============================================================================
// FIM PARTE 11: GERA√á√ÉO E MANIPULA√á√ÉO DE VERS√çCULOS
// ============================================================================

// ============================================================================
// IN√çCIO PARTE 12: SISTEMA DE COMPARTILHAMENTO
// ============================================================================

// Compartilhar vers√≠culo
async function compartilharVersiculo() {
    if (!versiculoAtual) return;
    
    const canvas = document.getElementById('canvasImagem');
    const textoCompleto = `${versiculoAtual.texto}\n- ${versiculoAtual.referencia}`;
    
    // Tentar Web Share API
    if (navigator.share && canvas) {
        try {
            // Converter imagem para blob
            const response = await fetch(canvas.src);
            const blob = await response.blob();
            const file = new File([blob], 'versiculo.png', { type: 'image/png' });
            
            await navigator.share({
                title: 'Vers√≠culo do Dia',
                text: textoCompleto,
                files: [file]
            });
            
            console.log('‚úÖ Compartilhado com sucesso!');
            mostrarToast('Compartilhado com sucesso!', 'success');
            
        } catch (error) {
            console.log('‚ùå Erro ao compartilhar:', error);
            copiarTextoParaClipboard(textoCompleto);
        }
    } else {
        // Fallback: copiar para clipboard
        copiarTextoParaClipboard(textoCompleto);
    }
}

// Copiar texto para clipboard
function copiarTextoParaClipboard(texto) {
    navigator.clipboard.writeText(texto).then(() => {
        console.log('üìã Texto copiado para clipboard');
        mostrarToast('Texto copiado!', 'success');
    }).catch(error => {
        console.error('‚ùå Erro ao copiar:', error);
        mostrarToast('Erro ao copiar texto', 'error');
    });
}

// Baixar imagem
function baixarImagem() {
    const canvas = document.getElementById('canvasImagem');
    
    if (canvas && canvas.src) {
        const link = document.createElement('a');
        link.download = `versiculo_${Date.now()}.png`;
        link.href = canvas.src;
        link.click();
        
        console.log('‚¨áÔ∏è Download iniciado');
        mostrarToast('Download iniciado!', 'success');
    }
}

// ============================================================================
// FIM PARTE 12: SISTEMA DE COMPARTILHAMENTO
// ============================================================================

// ============================================================================
// IN√çCIO PARTE 13: EVENTOS E INICIALIZA√á√ÉO
// ============================================================================

// Configurar eventos
function configurarEventos() {
    console.log('‚öôÔ∏è Configurando eventos...');
    
    // Bot√£o gerar vers√≠culo
    const btnGerar = document.getElementById('gerarVersiculo');
    if (btnGerar) {
        btnGerar.addEventListener('click', async () => {
            btnGerar.disabled = true;
            btnGerar.textContent = 'Gerando...';
            
            await gerarNovoVersiculo();
            
            btnGerar.disabled = false;
            btnGerar.textContent = 'Gerar Novo Vers√≠culo';
        });
    }
    
    // Mudan√ßa de tema
    const selectTema = document.getElementById('temaEscolhido');
    if (selectTema) {
        selectTema.addEventListener('change', async () => {
            console.log(`üéØ Tema alterado para: ${selectTema.value}`);
            await gerarNovoVersiculo();
        });
    }
    
    // Bot√µes de compartilhamento
    const btnCompartilhar = document.getElementById('compartilhar');
    if (btnCompartilhar) {
        btnCompartilhar.addEventListener('click', compartilharVersiculo);
    }
    
    const btnBaixar = document.getElementById('baixar');
    if (btnBaixar) {
        btnBaixar.addEventListener('click', baixarImagem);
    }
    
    // Atalhos de teclado
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            gerarNovoVersiculo();
        }
        if (e.key === 's' && e.ctrlKey) {
            e.preventDefault();
            baixarImagem();
        }
    });
}

// Verificar elementos do DOM
function verificarElementosDOM() {
    console.log('üìÑ Verificando elementos do DOM...');
    
    const elementosNecessarios = [
        'temaEscolhido',
        'versiculoTexto',
        'versiculoReferencia',
        'gerarVersiculo',
        'canvasImagem'
    ];
    
    elementosNecessarios.forEach(id => {
        const elemento = document.getElementById(id);
        if (elemento) {
            console.log(`‚úÖ ${id}: ENCONTRADO`);
        } else {
            console.log(`‚ùå ${id}: N√ÉO ENCONTRADO`);
        }
    });
}

// Inicializa√ß√£o principal
async function inicializarSistema() {
    console.log('üîç INICIANDO DEBUG...');
    console.log('‚úÖ Script de Vers√≠culos IA carregado completamente!');
    
    verificarElementosDOM();
    
    console.log('‚úÖ Vari√°vel versiculos: DEFINIDA');
    console.log(`üìö Temas dispon√≠veis: []`);
    console.log(`üéØ versiculoAtual: ${versiculoAtual}`);
    
    configurarEventos();
    
    // Verificar chave API
    const chaveValida = await verificarChaveAPI();
    if (chaveValida) {
        console.log('üîë Chave API v√°lida e pronta para uso');
    } else {
        console.log('‚ö†Ô∏è Usando apenas APIs gratuitas');
    }
    
    // Carregar vers√≠culos
    await carregarVersiculos();
    
    console.log('üìä Estat√≠sticas:', stats.totalGerado, 'imagens geradas');
    console.log('üöÄ Sistema de Vers√≠culos com IA inicializado completamente!');
    console.log('üí° Funcionalidades: Gera√ß√£o IA, Fallback Art√≠stico, Compartilhamento, Analytics');
}

// Event listener principal
document.addEventListener('DOMContentLoaded', inicializarSistema);

// Exportar fun√ß√µes para debug no console
window.debugFunctions = {
    definirChave: definirChaveManualmente,
    verificarChave: verificarChaveAPI,
    gerarVersiculo: gerarNovoVersiculo,
    stats: () => console.table(stats),
    limparCache: () => {
        localStorage.clear();
        console.log('üßπ Cache limpo');
    }
};

console.log('üí° Dica: Use window.debugFunctions para acessar fun√ß√µes de debug');

// ============================================================================
// FIM PARTE 13: EVENTOS E INICIALIZA√á√ÉO
// ============================================================================

// ============================================================================
// FIM DO ARQUIVO SCRIPT.JS
// ============================================================================
